import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

import 'home_page.dart';

// ignore_for_file: lines_longer_than_80_chars

// -----------------------------------------------------------------------------
/// EXAMPLE COPY PASTE THEME
//
// Use this example to via copy-paste test a theme using code generated by
// the Themes PlayGround found at:
// https://rydmike.com/flexcolorscheme/themesplayground-v5
// -----------------------------------------------------------------------------
void main() => runApp(const DemoApp());

class DemoApp extends StatefulWidget {
  const DemoApp({Key? key}) : super(key: key);

  @override
  State<DemoApp> createState() => _DemoAppState();
}

class _DemoAppState extends State<DemoApp> {
  ThemeMode themeMode = ThemeMode.system;

  // ignore: unused_field
  late final String? _fontFamily = GoogleFonts.notoSans().fontFamily;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Copy Playground Theme',
      // Uncomment the theme setup below and comment the copy-pasted
      // theme further below, if you want to try this app with a Flutter SDK
      // default theme, with the Material 2 default color scheme.

      // theme: ThemeData.from(colorScheme: const ColorScheme.light()).copyWith(
      //   typography: Typography.material2018(platform: defaultTargetPlatform),
      // ),
      // darkTheme: ThemeData.from(colorScheme: const ColorScheme.dark()).copyWith(
      //   typography: Typography.material2018(platform: defaultTargetPlatform),
      // ),

      // If you want to use ThemeData.from a ColorScheme based on a ColorScheme
      // from FlexColorScheme, then comment the other two theme setups and
      // uncomment the theme setup below, and copy-paste the generated
      // ColorScheme setup code from the Themes Playground app at
      // https://rydmike.com/flexcolorscheme/themesplayground-v5
      // over the ColorScheme, to try a new copy-pasted ColorScheme.
      // This will give you the same colors, but no other Theme behavior
      // improvements FlexColorScheme does when it creates its THemeDaya with
      // FlexColorScheme.toTheme or using extension FlexThemeData

      // TODO(rydmike): Add Copy-Paste template for ColorScheme.

      theme: ThemeData.from(colorScheme: const ColorScheme.light()).copyWith(
        typography: Typography.material2018(platform: defaultTargetPlatform),
      ),
      darkTheme: ThemeData.from(colorScheme: const ColorScheme.dark()).copyWith(
        typography: Typography.material2018(platform: defaultTargetPlatform),
      ),

      // Delete/comment the theme below and try the standard one above, or
      // copy-paste new setup code from the Themes Playground app at
      // https://rydmike.com/flexcolorscheme/themesplayground-v5
      // over the theme below, to try a new copy-pasted theme.

      // theme: FlexThemeData.light(
      //   scheme: FlexScheme.flutterDash,
      //   surfaceMode: FlexSurfaceMode.highScaffoldLowSurface,
      //   blendLevel: 12,
      //   appBarOpacity: 0.95,
      //   appBarElevation: 0.5,
      //   tooltipsMatchBackground: true,
      //   useSubThemes: true,
      //   subThemesData: const FlexSubThemesData(
      //     blendOnLevel: 20,
      //     blendOnColors: false,
      //     unselectedToggleIsColored: true,
      //     popupMenuOpacity: 0.95,
      //   ),
      //   useMaterial3ErrorColors: true,
      //   visualDensity: FlexColorScheme.comfortablePlatformDensity,
      //   fontFamily: GoogleFonts.notoSans().fontFamily,
      // ),
      // darkTheme: FlexThemeData.dark(
      //   scheme: FlexScheme.flutterDash,
      //   surfaceMode: FlexSurfaceMode.highScaffoldLowSurface,
      //   blendLevel: 12,
      //   appBarStyle: FlexAppBarStyle.background,
      //   appBarOpacity: 0.95,
      //   appBarElevation: 0.5,
      //   tooltipsMatchBackground: true,
      //   useSubThemes: true,
      //   subThemesData: const FlexSubThemesData(
      //     blendOnLevel: 30,
      //     unselectedToggleIsColored: true,
      //     popupMenuOpacity: 0.95,
      //   ),
      //   useMaterial3ErrorColors: true,
      //   visualDensity: FlexColorScheme.comfortablePlatformDensity,
      //   fontFamily: GoogleFonts.notoSans().fontFamily,
      // ),

      // ThemeMode toggle via callback
      themeMode: themeMode,
      home: HomePage(
        themeMode: themeMode,
        onThemeModeChanged: (ThemeMode mode) {
          setState(() {
            themeMode = mode;
          });
        },
      ),
    );
  }
}

const ColorScheme myFlexColorScheme = ColorScheme(
  brightness: Brightness.light,
  primary: Color(0xff00497c),
  onPrimary: Color(0xffffffff),
  primaryContainer: Color(0xffcfe4ff),
  onPrimaryContainer: Color(0xff001d36),
  secondary: Color(0xff4f599d),
  onSecondary: Color(0xffffffff),
  secondaryContainer: Color(0xffdde0ff),
  onSecondaryContainer: Color(0xff041157),
  tertiary: Color(0xff6c5b51),
  onTertiary: Color(0xffffffff),
  tertiaryContainer: Color(0xfff5ded1),
  onTertiaryContainer: Color(0xff251911),
  error: Color(0xffba1b1b),
  onError: Color(0xffffffff),
  errorContainer: Color(0xffffdad4),
  onErrorContainer: Color(0xff410001),
  outline: Color(0xff73777f),
  background: Color(0xfff6f7fb),
  onBackground: Color(0xff1a1c1e),
  surface: Color(0xfffaf9fd),
  onSurface: Color(0xff1a1c1e),
  surfaceVariant: Color(0xffdce1ea),
  onSurfaceVariant: Color(0xff42474e),
  inverseSurface: Color(0xff2e3033),
  onInverseSurface: Color(0xfff1f0f4),
  inversePrimary: Color(0xff9acaff),
  shadow: Color(0xff000000),
);
